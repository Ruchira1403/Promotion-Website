- name: Deploy Promotion Website to EC2
  hosts: all
  become: yes
  vars:
    ansible_ssh_timeout: 120
    app_dir: "/home/ubuntu/promotion-website"
    project_src: "{{ playbook_dir }}/.."

  pre_tasks:
    - name: Check if Docker is already installed
      command: which docker
      register: docker_check
      ignore_errors: yes
      changed_when: false

  tasks:
    # Update packages and install dependencies
    - name: Update package cache
      apt:
        update_cache: yes
      retries: 3
      delay: 5
      until: true
      when: docker_check.rc != 0

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
      retries: 3
      delay: 5
      until: true
      when: docker_check.rc != 0

    # Install Docker using the official script
    - name: Install Docker using official script
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
      args:
        creates: /usr/bin/docker
      retries: 3
      delay: 5
      until: true
      when: docker_check.rc != 0

    # Add ubuntu user to docker group
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      when: docker_check.rc != 0

    # Install Docker Compose
    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: "/usr/local/bin/docker-compose"
        mode: '0755'
        force: yes
      retries: 3
      delay: 5
      until: true

    # Ensure Docker service is running
    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes
      retries: 3
      delay: 5
      until: true

    # Create application directory
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    # Copy docker-compose file and environment file
    - name: Copy docker-compose file
      copy:
        dest: "{{ app_dir }}/docker-compose.yml"
        content: |
          version: "3.8"
          
          services:
            frontend:
              image: tharuka2001/dairy-frontend:latest
              ports:
                - "5173:5173"
              networks:
                - app-network
              restart: always
              depends_on:
                - backend
          
            backend:
              image: tharuka2001/dairy-backend:latest
              ports:
                - "4000:4000"
              env_file:
                - .env
              networks:
                - app-network
              restart: always
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
                interval: 30s
                timeout: 10s
                retries: 5
          
          networks:
            app-network:
              driver: bridge
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    # Create .env file for backend
    - name: Create .env file
      copy:
        dest: "{{ app_dir }}/.env"
        content: |
          MONGODB_URI=mongodb+srv://usudarasubodhitha:Ky6eGwIULcmMRelb@cluster0.phvip.mongodb.net
          JWT_SECRET=79240e340fb04076718f094981292e09aea180ad7138657ed8a0da39a9fe7c59884e7bf6019e16bd10e3ccf28c7bfca2561cdf6f8c339d3c6e2ab29f35e3d968
          PORT=4000
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    # Clean up old Docker resources
    - name: Remove unused Docker data
      shell: docker system prune -af --volumes
      register: docker_prune
      changed_when: docker_prune.stdout.find('Total reclaimed space') != -1
      ignore_errors: yes

    # Deploy with Docker Compose
    - name: Stop existing containers
      shell: docker-compose down
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes
      async: 300
      poll: 10

    - name: Pull Docker images
      shell: docker-compose pull
      args:
        chdir: "{{ app_dir }}"
      register: docker_compose_pull
      async: 600
      poll: 15

    - name: Start Docker Compose services
      shell: docker-compose up -d
      args:
        chdir: "{{ app_dir }}"
      register: docker_compose_up
      changed_when: docker_compose_up.stdout.find('Creating') != -1 or docker_compose_up.stdout.find('Starting') != -1
      async: 600
      poll: 15

    - name: Wait for containers to fully start
      pause:
        seconds: 10
      when: docker_compose_up.changed

    # Verify deployment
    - name: Check if containers are running
      shell: docker ps | grep -E 'dairy-frontend|dairy-backend'
      register: container_check
      changed_when: false
      ignore_errors: yes
      retries: 3
      delay: 5
      until: container_check.rc == 0 or container_check.attempts == 3

    - name: Deployment status
      debug:
        msg: "Deployment successful! Containers are running."
      when: container_check.rc == 0

    - name: Deployment status
      fail:
        msg: "Deployment failed. Containers are not running properly."
      when: container_check.rc != 0